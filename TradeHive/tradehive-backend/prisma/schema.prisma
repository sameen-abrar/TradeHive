// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id             Int       @id @default(autoincrement())
  email          String?   @unique
  password       String?
  hashedPassword String    @map("hashed_password")
  createdAt      DateTime? @map("created_at")
  userId         Int?      @unique
  user           User?     @relation(fields: [userId], references: [id])

  @@map("auths")
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String          @map("first_name")
  lastName      String          @map("last_name")
  phone         String?         @unique
  address       String?
  createdAt     DateTime?       @map("created_at")
  updatedAt     DateTime?       @map("updated_at")
  auth          Auth?
  products      Product[]
  RentalBooking RentalBooking[]
  Invoice       Invoice[]

  @@map("users")
}

model Product {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  price          Float?
  rentPrice      Float?            @map("rent_price")
  rentType       String?           @map("rent_type")
  createdBy      Int?              @map("created_by")
  createdAt      DateTime?         @map("created_at")
  updatedAt      DateTime?         @map("updated_at")
  categories    ProductCategory[]
  rentalBookings RentalBooking[]
  invoices       Invoice[]
  user           User?             @relation(fields: [createdBy], references: [id])

  @@map("products")
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String
  code        String?
  description String?
  createdAt   DateTime?         @map("created_at")
  updatedAt   DateTime?         @map("updated_at")
  products    ProductCategory[]

  @@map("catagories")
}

model ProductCategory {
  // id          Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  categoryId Int       @map("category_id")
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  product    Product   @relation(fields: [productId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("product_categories")
}

model RentalBooking {
  id        Int       @id @default(autoincrement())
  userId    Int
  productId Int       @map("product_id")
  fromDate  DateTime  @map("from_date")
  toDate    DateTime  @map("to_date")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("rental_bookings")
}

model Invoice {
  id        Int       @id @default(autoincrement())
  productId Int       @map("product_id")
  userId    Int
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
